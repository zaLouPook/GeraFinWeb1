@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
   ViewData["Title"] = "MyBranches";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box">
         <div class="box-header with-border">
            <h3 class="box-title text-primary"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
            <div class="box-tools pull-right">
               <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                       title="Collapse">
                  <i class="fa fa-minus"></i>
               </button>
               <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                  <i class="fa fa-times"></i>
               </button>
            </div>
         </div>
         <div class="box-body">
            <div class="modal modal-warning fade" id="modal-warning">
               <div class="modal-dialog">
                  <div class="modal-content">
                     <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                           <span aria-hidden="true">×</span>
                        </button>
                        <h4 class="modal-title">Delete</h4>
                     </div>
                     <div class="modal-body">
                        <p style="text-align:center">Yo will be logged out in <p id="demo"></p> to reload the config</p>
                     </div>
                     <div class="modal-footer" style="text-align:center">
                        <button type="button" style="text-align:center" data-dismiss="modal">Close</button>
                     </div>
                  </div>
               </div>
            </div>
            <div id="Grid"></div>
         </div>
         <!-- /.box-body -->
         <div class="box-footer">

         </div>
         <!-- /.box-footer-->
      </div>
      <!-- /.box -->
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

   <script type="text/javascript">

      var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();
      var branchId = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));

      //var countDownDate = new Date();
      //countDownDate.setSeconds(countDownDate.getSeconds() + 3);

      ////var countDownDate = new Date("Jan 5, 2021 15:37:25").getTime();

      //// Update the count down every 1 second

      //var x = setInterval(function () {

      //   // Get today's date and time
      //   var now = new Date().getTime();

      //   // Find the distance between now and the count down date

      //   var distance = countDownDate - now;

      //   // Time calculations for days, hours, minutes and seconds
      //   var days = Math.floor(distance / (1000 * 60 * 60 * 24));
      //   var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      //   var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      //   var seconds = Math.floor((distance % (1000 * 60)) / 1000);

      //   // Display the result in the element with id="demo"
      //   document.getElementById("demo").innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";

      //// If the count down is finished, write some text
      //   if (distance < 0) {
      //      clearInterval(x);
      //      $("#modal-danger").modal();
      //   }
      //}, 1000);

        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

           dataManager.ready.done(function (e) {
              $("#Grid").ejGrid({
                 dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/Branch/Insert",
                    updateUrl: "/api/Branch/Update",
                    removeUrl: "/api/Branch/Remove",
                 }),

                 toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                 },

                 editSettings: {
                    allowEditing: true,
                    allowAdding: true,
                    allowDeleting: false,
                    showDeleteConfirmDialog: false,
                    editMode: "dialog"
                 },

                 toolbarClick: function (args) {
                    if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                       $("#modal-info").modal()
                    }
                 },

                 isResponsive: true,
                 enableResponsiveRow: true,
                 allowSorting: true,
                 allowSearching: true,
                 allowFiltering: true,
                 filterSettings: {
                    filterType: "excel",
                    maxFilterChoices: 100,
                    enableCaseSensitivity: false
                 },

                 allowPaging: true,
                 pageSettings: {
                     pageSize: 25, printMode: ej.Grid.PrintMode.CurrentPage
                 },

                 columns: [
                    { field: "BranchId", headerText: 'Branch Id', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "BranchName", headerText: 'Branch Name', validationRules: { required: true } },
                    { field: "Description", headerText: 'Description',  visible: false },
                    { field: "Address", headerText: 'Street Name', validationRules: { required: true },  visible: false  },
                    { field: "City", headerText: 'City',  visible: false },
                    { field: "State", headerText: 'Province',  visible: false },
                    { field: "ZipCode", headerText: 'Postal Code',  visible: false },
                    { field: "ContactPerson", headerText: 'CP', validationRules: { required: true } },
                    { field: "Phone", headerText: 'Phone', },
                    { field: "Email", headerText: 'Email', },
                    { field: "ViewBranch", headerText: 'View Branch', editType: "booleanedit", type: "boolean", editParams: { showRoundedCorner: true }, textAlign: "Center" },
                 ],
                 actionComplete: "complete",
              });
           });
        });

      function LogoutUser() {


      }
      function complete(args) {

         if (args.requestType == 'beginedit') {
            $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
         }

         if (args.requestType == "save") {

            $(function () {
            var fnTimeOut = function () {
               jQuery.timeoutDialog.setupDialogTimer({
                  timeout: 5,
                  countdown: 4,
                  logout_redirect_url: '@Url.Action("Login", "Account")',
                  keep_alive_url: '@Url.Action("Keepalive", "Home")'
               });
            };
            fnTimeOut();
         });
        }
      }
      if ('@HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")' != 0) {

         $("#modal-admin").modal();

      }

   </script>
}
