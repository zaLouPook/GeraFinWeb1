@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Credit Note";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <section class="content-header" id="content-Page-header">
        <h1>
            @ViewData["Title"]
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
            <li><a href="/CreditNotes/Index">@ViewData["Title"]</a></li>
        </ol>
    </section>
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title text-primary"><i class="fa fa-certificate"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div id="Grid"></div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">

            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

    <script type="text/javascript">
      var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();
      var BranchId = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));

      var QtyMaxValue = 0;
      var dataManager = ej.DataManager({
         url: "/api/CreditedLines/GetCreditedLines",
         adaptor: new ej.WebApiAdaptor(),
         offline: true,
      });

      // Select PO Name
      var dataManPo = ej.DataManager({
         url: "/api/CreditedLines/GetPOByTransType",
         adaptor: new ej.WebApiAdaptor(),
      });

      var dataManPro = ej.DataManager({
         url: "/api/Product/GetProduct",
         adaptor: new ej.WebApiAdaptor(),
      });

      dataManager.ready.done(function (e) {
         $("#Grid").ejGrid({
            dataSource: ej.DataManager({
               json: e.result,
               adaptor: new ej.remoteSaveAdaptor(),
               insertUrl: "/api/CreditedLines/Insert",
               updateUrl: "/api/CreditedLines/Update",
               removeUrl: "/api/CreditedLines/Remove",
            }),

            editSettings: {
               allowEditing: true,
               allowAdding: true,
               allowDeleting: true,
               showDeleteConfirmDialog: false,
            },

            toolbarClick: function (args) {
               if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                  $("#modal-info").modal()
               }
            },

            isResponsive: true,
            enableResponsiveRow: true,
            allowSorting: true,
            allowFiltering: true,
            allowSearching: true,

            allowFiltering: false,
            filterSettings: {
               filterType: "excel",
               maxFilterChoices: 100,
               enableCaseSensitivity: false
            },

            allowPaging: true,
            pageSettings: {
               pageSize: 25, printMode: ej.Grid.PrintMode.AllPages
            },

            toolbarSettings: {
               showToolbar: true,
               toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"],
               showStackedHeader: true,
               isResponsive: true,
            },

            columns: [
                { field: "LineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                { field: "CreditedLineId", headerText: 'CreditedLineId', defaultValue: 0, visible: false },
                { field: "PurchaseOrderId", headerText: 'Inv Number', defaultValue: 0, editType: ej.Grid.EditingType.Dropdown, foreignKeyField: "PurchaseOrderId", foreignKeyValue: "Remarks", dataSource: dataManPo },
                { field: "ProductId", headerText: 'ProductName', width: 350, defaultValue: 0, editType: ej.Grid.EditingType.Dropdown, foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManPro, validationRules: { required: true }, },
                { field: "UOM", headerText: 'UOM', defaultValue: "0", editType: ej.Grid.EditingType.text, visible: false },
                { field: "Description", headerText: 'Description', defaultValue: "0", allowEditing: false, visible: false },
                { field: "Quantity", headerText: 'Quantity', defaultValue: 1, validationRules: { required: true }, editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 },  format: "{0:n2}" },
                { field: "Price", headerText: 'Price', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "R " + "{0:n2}" },
                { field: "Amount", headerText: 'Amount', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "R " + "{0:n2}" },
                { field: "TransactionTypeId", headerText: 'TransactionTypeId', defaultValue: 3, visible: false },
            ],
            beforePrint: "beforePrint",
            actionComplete: "complete"
         });
      });

      function complete(args) {

         if (args.requestType == "beginedit" || args.requestType == "add") {

            var POdropdownObj = $("#" + this._id + "PurchaseOrderId").ejDropDownList('instance');
            POdropdownObj.option({ enableFilterSearch: true, value: args.rowData.POName });

            $('#GridPurchaseOrderId').ejDropDownList({ change: 'branchDdlChange' });
            $('#GridProductId').ejDropDownList({ change: 'ProductItemChange' });
         }

         if (args.requestType == 'beginedit') {

            $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });

            $('#GridPurchaseOrderId').ejDropDownList({ change: 'branchDdlChange' });
            $('#GridProductId').ejDropDownList({ change: 'ProductItemChange' });
         }
      }

      function branchDdlChange(e) {

         $.ajax({
            type: 'GET',
            url: '/api/CreditedLines/GetProdByPOID/?id=' + e.selectedValue,
            data: "{}",
            success: function (data) {
               var s = '<option value="-1">Please Select a Product</option>';
               for (var i = 0; i < data.length; i++) {
                  s += '<option value="' + data[i].ProductId + '">' + data[i].ProductName + '</option>';
               }
               $("#GridProductId").ejDropDownList({
                  dataSource: data,
                  fields: { id: 'ProductId', text: 'ProductName', value: 'ProductId' },
                  value: data.ProductId
               });
            }
         })
      }

      var Price;

      function ProductItemChange(e) {

         $.ajax({
            type: 'GET',
            url: '/api/CreditedLines/GetPriceByProdId/?id=' + e.selectedValue,
            Pricedata: "{}",
            success: function (Pricedata) {

               for (var i = 0; i < Pricedata.length; i++) {

                  Price = parseFloat(Pricedata[i].Price);
               }
            }
         })
      }

    </script>
}
