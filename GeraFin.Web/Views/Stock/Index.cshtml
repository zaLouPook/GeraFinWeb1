@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
   ViewData["Title"] = "Stock On Hand";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box">
         <div class="box-header with-border">
            <h3 class="box-title text-primary"><i class="fa fa-tag"></i> @ViewData["Title"]</h3>
            <div class="box-tools pull-right">
               <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                       title="Collapse">
                  <i class="fa fa-minus"></i>
               </button>
               <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                  <i class="fa fa-times"></i>
               </button>
            </div>
         </div>
         <div class="box-body">
            <div id="Grid"></div>
         </div>
         <!-- /.box-body -->
         <div class="box-footer">

         </div>
         <!-- /.box-footer-->
      </div>
      <!-- /.box -->
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

   <script type="text/javascript">

      var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();

        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/Stock",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            var dataManagerUnitOfMeasure = ej.DataManager({
                url: "/api/UnitOfMeasure",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerVendor = ej.DataManager({
            url: "/api/Vendor",
            adaptor: new ej.WebApiAdaptor()
            });

            dataManager.ready.done(function (e) {
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/Stock/Insert",
                        updateUrl: "/api/Stock/Update",
                        removeUrl: "/api/Stock/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: false,
                        allowAdding: false,
                        allowDeleting: false,
                        showDeleteConfirmDialog: false,
                        editMode: "dialog"
                   },

                   toolbarClick: function (args) {
                      if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                         $("#modal-info").modal()
                      }
                   },

                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 25, printMode: ej.Grid.PrintMode.AllPages },
                   columns: [
                      { field: "StockId", headerText: 'Stock Id', isPrimaryKey: true, isIdentity: true, visible: false },
                      { field: "ProductId", headerText: 'Product Id', isPrimaryKey: false, isIdentity: false, visible: false },
                      { field: "VendorId", headerText: 'Supplier', allowEditing: false, foreignKeyField: "VendorId", foreignKeyValue: "VendorName", dataSource: dataManagerVendor},
                      { field: "BrandName", headerText: 'Brand', validationRules: { required: true } },
                      { field: "ProductName", headerText: 'Product', width: 300, validationRules: { required: true } },
                      { field: "Quantity", headerText: 'Quantity', editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 }, format: "{0:n2}" },
                      { field: "UnitOfMeasureId", headerText: 'UOM', foreignKeyField: "UnitOfMeasureId", foreignKeyValue: "UnitOfMeasureName", dataSource: dataManagerUnitOfMeasure, validationRules: { required: true } },
                      { field: "DefaultBuyingPrice", headerText: 'Price', editType: "numericedit", format: "R" + " " + "{0:n2}" },
                      { field: "TotalStock", headerText: 'Total Stock', editType: "numericedit", format: "R" + " " + "{0:n2}" },
                      { field: "StockTakeQuantity", headerText: 'StockTake Quantity', defaultValue: 0, width: 135, editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 }, format: "{0:n2}" },
                      { field: "StockTakeAmount", headerText: 'StockTake Amount', defaultValue: 0, width: 135, editType: "numericedit", format: "R" + " " + "{0:n2}" },
                      { field: "IsTransferedStock", headerText: 'Transfered Stock',width: 140, editType: "booleanedit", type: "boolean", editParams: { showRoundedCorner: true }, textAlign: "Center" },
                    ],
                    actionComplete: "complete",
                });
            });
        });

        function complete(args) {
            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'beginedit' || args.requestType == 'add') {
                $('#GridBranchId').ejDropDownList({ change: 'branchDdlChange' });
            }
        }

        //function branchDdlChange(e) {
        //    $.ajax({
        //        url: '/api/Currency/GetByBranchId/' + e.selectedValue,
        //        type: 'GET',
        //        success: function (data) {
        //            $("#GridCurrencyId").ejDropDownList({
        //                dataSource: [data],
        //                fields: { id: 'CurrencyId', text: 'CurrencyCode', value: 'CurrencyId' },
        //                value: data.CurrencyId
        //            });
        //        }
        //    })
        //}
   </script>
}

