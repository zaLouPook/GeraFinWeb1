@using System.Linq;
@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject GeraFin.DAL.DataAccess.ApplicationDbContext context

@{
   int BranchId = Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));
   Branch branch = context.Branch.SingleOrDefault(x => x.BranchId == BranchId);
}

@model GeraFin.Models.ViewModels.GeraFinWeb.DailyIncome

@{
   ViewData["Title"] = "Daily Income Detail";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="/DailyIncome/Index">Daily Income</a></li>
         <li><a href="/DailyIncome/Detail/?id=@Model.SalesOrderId#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box" id="GeraFinTop">
         <table style="width:100%; border:3px solid;">
            <tr style="background-color:#367fa9; color:#fff">
               <th width="50%">
                  GERATEC
               </th>
               <th width="50%">
                  UNIT DETAILS
               </th>
            </tr>
            <tr>
               <td>
                  PO Box 5342
               </td>
               <td>
                  @branch.BranchName
               </td>
            </tr>
            <tr>
               <td>
                  Tyger Valley
               </td>
               <td>
                  @{
                     var OrderDate1 = Model.OrderDate.ToString("dd-MMM-yyyy");
                  }
                  @Html.DisplayFor(model => OrderDate1)
               </td>
            </tr>
            <tr>
               <td>
                  7536
               </td>
               <td>
                  SO Status: Completed
               </td>
            </tr>
         </table>

         <div class="box-header with-border">

         </div>
      </div>
      <!-- /.box -->
      <div class="box" id="AppendBefore">
         <div class="box-body">
            <div class="row">
               <div class="col-lg-12">
                  <div id="Grid"></div>
               </div>
            </div>
            <div class="row">
               <div class="col-lg-8">

               </div>
               <div class="col-lg-4">
                  <table style="width:100%; border:3px solid;">
                     <tr style="background-color:#367fa9; color:#fff">
                        <th style="width:33.3%">
                           Amount
                        </th>
                        <th style="width:33.3%">
                           SubTotal
                        </th>
                        <th style="width:33.3%">
                           Total
                        </th>
                     </tr>
                     <tr>
                        <td id="Amount">R @Model.Amount</td>
                        <td id="SubTotal">R @Model.SubTotal</td>
                        <td id="Total">R @Model.Total</td>
                     </tr>
                  </table>
               </div>
            </div>
         </div>
      </div>
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

   <script type="text/javascript">

       var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();
       var BranchId = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));

        function beforePrint(args) {
            document.getElementById("AppendBefore").style.display = "none";
            $("Invoice-logo").css('display', 'block');
            args.element.prepend($(".box"));
        }

        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/DailyIncomeLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "SalesOrderId": @Model.SalesOrderId}],
                offline: true
            });

            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerSalesOrder = ej.DataManager({
                url: "/api/DailyIncome",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerBranch = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerCustomer = ej.DataManager({
                url: "/api/Customer",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerSalesType = ej.DataManager({
                url: "/api/SalesType",
                adaptor: new ej.WebApiAdaptor()
            });

            $('#BranchId').ejDropDownList({
                dataSource: dataManagerBranch,
                fields: { id: 'BranchId', text: 'BranchName', value: 'BranchId' },
                value: @Model.BranchId,
                enabled: false,
            });

            $('#CustomerId').ejDropDownList({
                dataSource: dataManagerCustomer,
                fields: { id: 'CustomerId', text: 'CustomerName', value: 'CustomerId' },
                value: @Model.CustomerId,
                enabled: false,
            });

            $('#SalesTypeId').ejDropDownList({
                dataSource: dataManagerSalesType,
                fields: { id: 'SalesTypeId', text: 'SalesTypeName', value: 'SalesTypeId' },
                value: @Model.SalesTypeId,
                enabled: false,
            });

            dataManager.ready.done(function (e) {
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/DailyIncomeLine/Insert",
                    updateUrl: "/api/DailyIncomeLine/Update",
                    removeUrl: "/api/DailyIncomeLine/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel", "printGrid"]
                },
                editSettings: {
                    allowEditing: true,
                    allowAdding: Permission,
                    allowDeleting: Permission,
                    showDeleteConfirmDialog: false,
               },

               toolbarClick: function (args) {
                  if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                     $("#modal-info").modal()
                  }
               },

               isResponsive: true,
               enableResponsiveRow: true,
               allowSorting: true,
               allowSearching: true,
               allowFiltering: true,
               filterSettings: {
                  filterType: "excel",
                  maxFilterChoices: 100,
                  enableCaseSensitivity: false
               },

               allowPaging: true,
               pageSettings: {
                  pageSize: 25, printMode: ej.Grid.PrintMode.AllPages
               },

               columns: [
                  { field: "SalesOrderLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                  { field: "ProductId", headerText: 'ProductId', visible: false },
                  { field: "SalesOrderId", headerText: 'SO#', defaultValue: @Model.SalesOrderId, foreignKeyField: "SalesOrderId", foreignKeyValue: "SalesOrderName", dataSource: dataManagerSalesOrder, visible: false },
                  { field: "Description", headerText: 'Product', allowEditing: false },
                  { field: "Price", headerText: 'Price', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "R " + "{0:n2}" },
                  { field: "Quantity", headerText: 'Qty', defaultValue: 1, editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 }, format: "{0:n2}" },
                  { field: "Total", headerText: 'Total', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "R " + "{0:n2}" },
                ],
                beforePrint: "beforePrint",
                actionComplete: "complete",
            });
            });
        });

       function complete(args) {

          if (args.requestType == 'beginedit') {
             $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
          }

          if (args.requestType == 'save' || args.requestType == 'delete') {
             RewriteTotal(args.data.SalesOrderId);
          }
       }

       function RewriteTotal(salesOrderId) {
          $.ajax({
             type: 'GET',
             url: '/api/DailyIncome/GetById/' + salesOrderId,
             success: function (data) {
                $('#Amount').text(data.Amount);
                $('#SubTotal').text(data.SubTotal);
                $('#Total').text(data.Total);
             }
          });
       }
   </script>
}

