@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
   ViewData["Title"] = "Specials";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box">
         <div class="box-header with-border">
            <h3 class="box-title text-primary"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
            <div class="box-tools pull-right">
               <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                       title="Collapse">
                  <i class="fa fa-minus"></i>
               </button>
               <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                  <i class="fa fa-times"></i>
               </button>
            </div>
         </div>
         <div class="box-body">
            <div id="Grid"></div>
         </div>
         <!-- /.box-body -->
         <div class="box-footer">

         </div>
         <!-- /.box-footer-->
      </div>
      <!-- /.box -->
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

   <script type="text/javascript">
       $(function () {

          var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();

            var dataManager = ej.DataManager({
                url: "/api/Specials",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            var dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerBranch = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManager.ready.done(function (e) {
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/Specials/Insert",
                        updateUrl: "/api/Specials/Update",
                        removeUrl: "/api/Specials/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: Permission,
                        allowAdding: Permission,
                        allowDeleting: Permission,
                        showDeleteConfirmDialog: false,
                        editMode: "dialog"
                   },

                   toolbarClick: function (args) {
                      if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                         $("#modal-info").modal()
                      }
                   },

                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 25, printMode: ej.Grid.PrintMode.AllPages },
                    columns: [
                        { field: "SpecialId", headerText: 'SpecialId', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "ProductId", headerText: 'Product', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct },
                        { field: "BranchId", headerText: 'Unit', foreignKeyField: "BranchId", defaultValue:1, foreignKeyValue: "BranchName", dataSource: dataManagerBranch, validationRules: { required: true }, visible: true },
                        { field: "OriginalPrice", headerText: 'OriginalPrice', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                        { field: "SpecialPrice", headerText: 'SpecialPrice', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                        { field: "Month", headerText: 'Month', },
                        { field: "SpecialFrom", headerText: 'SpecialFrom', editType: "datepicker", format: "{0:yyyy/MM/dd}", validationRules: { required: true } },
                        { field: "SpecialTo", headerText: 'SpecialTo', editType: "datepicker", format: "{0:yyyy/MM/dd}", validationRules: { required: true } },
                        { field: "Expired", headerText: 'Expired', editType: "booleanedit", type: "boolean", editParams: { showRoundedCorner: true }, textAlign: "Center" },
                    ],
                    actionComplete: "complete",
                });

            });
        });

        function complete(args) {
            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
        }
   </script>
}

