@using System.Linq;
@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@inject GeraFin.DAL.DataAccess.ApplicationDbContext context

@{
   int BranchId = Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));
   Branch branch = context.Branch.SingleOrDefault(x => x.BranchId == BranchId);
}
@model GeraFin.Models.ViewModels.GeraFinWeb.DailyIssues

@{
   ViewData["Title"] = "Issues Order Detail";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="/DailyIssues/Index">Daily Issues</a></li>
         <li><a href="/DailyIssues/Detail/?id=@Model.DailyIssuesId#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box" id="GeraFinTop">
         <div class="Invoice-logo">
            <!--<img src="/images/GeraLogo.PNG" style="float:left;height: 75px;width: 75px; "> <b> GERA</b>FIN-->
         </div>
         <table style="width:100%; border:3px solid;">
            <tr style="background-color:#367fa9; color:#fff">
               <th width="50%">
                  GERATEC
               </th>
               <th width="50%">
                  UNIT DETAILS
               </th>
            </tr>
            <tr>
               <td>
                  PO Box 5342
               </td>
               <td>
                  @branch.BranchName
               </td>
            </tr>
            <tr>
               <td>
                  Tyger Valley
               </td>
               <td>
                  @{
                     var OrderDate1 = Model.OrderDate.ToString("yyyy-MM-dd");
                  }
                  @Html.DisplayFor(Model => OrderDate1)
               </td>
            </tr>
            <tr>
               <td>
                  7536
               </td>
               <td>
                  @{
                     string Status = "";
                     if (Model.IssueComplete == false)
                     {
                        Status = "Not Complete";
                     }
                     else
                     {
                        Status = "Complete";
                     }
                  }
                  IO Status: @Html.DisplayFor(model => Status)
               </td>
            </tr>
         </table>
         <div class="box-header with-border"></div>
      </div>
      <!-- /.box -->
      <div class="box" id="AppendBefore">
         <div class="box-body">
            <div class="row">
               <div class="col-lg-12">
                  <div id="Grid"></div>
               </div>
            </div>

            <div class="row">
               <div class="col-lg-8"></div>
               <div class="col-lg-4">
                  <table style="width:100%; border:3px solid;">
                     <tr style="background-color:#367fa9; color:#fff">
                        <th style="width:50%">
                           SubTotal
                        </th>
                        <th style="width:50%">
                           Total
                        </th>
                     </tr>
                     <tr>
                        <td id="SubTotal">R @Model.SubTotal</td>
                        <td id="Total">R @Model.Total</td>
                     </tr>
                  </table>
               </div>
            </div>
         </div>
      </div>
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

   <style>
      #confirm {
         display: none;
         background-color: #ff0000;
         border: 1px solid #aaa;
         position: sticky;
         width: 250px;
         left: 50%;
         margin-left: -100px;
         padding: 6px 8px 8px;
         box-sizing: border-box;
         text-align: center;
      }

         #confirm button {
            background-color: #2a716c;
            display: inline-block;
            border-radius: 5px;
            border: 1px solid #aaa;
            padding: 5px;
            text-align: center;
            width: 80px;
            cursor: pointer;
         }

         #confirm .message {
            text-align: center;
         }
   </style>
}

@section Scripts{

    <script type="text/javascript">
        var Permission = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();
        var BranchId = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));
        var ModelData = '@Model.IssueComplete.ToString()'.toLowerCase().trim();
        var test = @Convert.ToInt32(Model.IssueComplete);

        var data = true;
        if (test == 1) {
            data = false;
        }
        if (Permission == 1) {
            data = true;
        }

        function beforePrint(args) {
            document.getElementById("AppendBefore").style.display = "none";
            $(".GeraFinTop").css('display', 'block');
            args.element.prepend($(".box"));
        }

        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/DailyIssuesLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "DailyIssuesId": @Model.DailyIssuesId}],
                offline: true
            });

            var dataManagerProduct = ej.DataManager({
                url: "/api/Stock",
                adaptor: new ej.WebApiAdaptor(),
            });

            var dataManagerSalesOrder = ej.DataManager({
                url: "/api/DailyIssues",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerBranch = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            $('#BranchId').ejDropDownList({
                dataSource: dataManagerBranch,
                fields: { id: 'BranchId', text: 'BranchName', value: 'BranchId' },
                value: @Model.BranchId,
                enabled: false,
            });

            dataManager.ready.done(function (e) {

                $.validator.addMethod("customRegex", function (value, element, params) {
                    var EnteredValue = parseFloat(value);

                    var gridValueID = GridProductId.value;
                    var available = 0;

                    $("#GridAvailable1 option").each(function () {

                        var matchID = $(this).val();

                        if (matchID == gridValueID) {
                            available = parseFloat($(this).text());
                        }
                    });
                    debugger;

                    if (available >= EnteredValue) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }, "To little stock available");

                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/DailyIssuesLine/Insert",
                        updateUrl: "/api/DailyIssuesLine/Update",
                        removeUrl: "/api/DailyIssuesLine/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: data,
                        allowAdding: data,
                        allowDeleting: data,
                        showDeleteConfirmDialog: false,
                    },

                    toolbarClick: function (args) {
                        if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                            $("#modal-info").modal()
                        }
                    },

                    allowPaging: true,
                    pageSettings: {
                        pageSize: 25, printMode: ej.Grid.PrintMode.AllPages
                    },

                    columns: [
                        { field: "DailyIssuesLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "DailyIssuesId", headerText: 'IO#', defaultValue: @Model.DailyIssuesId, foreignKeyField: "DailyIssuesId", foreignKeyValue: "DailyIssuesName", dataSource: dataManagerSalesOrder, visible: false },
                        { field: "ProductId", headerText: 'Product', width: 500, foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct, editType: ej.Grid.EditingType.Dropdown },
                        { field: "Description", headerText: 'Product Code', allowEditing: false, visible: false },
                        { field: "Quantity", headerText: 'Quantity', editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 }, format: "{0:n2}", validationRules: { customRegex: 5 } },
                        { field: "Available1", headerText: 'Available1', foreignKeyField: "ProductId", foreignKeyValue: "Quantity", dataSource: dataManagerProduct, visible: false },
                        { field: "Available", headerText: 'Available', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "R " + "{0:n2}", visible: false },
                        { field: "Price", headerText: 'Price', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "R " + "{0:n2}" },
                        { field: "Total", headerText: 'Total', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                    ],
                    beforePrint: "beforePrint",
                    actionComplete: "complete",
                });
            });
        });

        function complete(args) {

            if (args.requestType == "beginedit" || args.requestType == "add") {

                var dropdownObj = $("#" + this._id + "ProductId").ejDropDownList('instance');

                dropdownObj.option({ enableFilterSearch: true, value: args.rowData.ProductId });
            }

            if (args.requestType == 'beginedit') {

                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'save' || args.requestType == 'delete') {

                var issuesid = @Model.DailyIssuesId;

                RewriteTotal(issuesid);
            }
        }

        function RewriteTotal(issuesid) {
            $.ajax({
                type: 'GET',
                url: '/api/DailyIssues/GetById/' + issuesid,
                success: function (data) {
                    $('#SubTotal').text(data.SubTotal);
                    $('#Total').text(data.Total);
                }
            });
        }

        @*function UpdateToolbarEdit(ModelData) {
            if (@Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")) == 1) {
                var editItem = $("#Grid_toolbarItems").data("ejToolbar").items.get(1);
                editItem.hidden = false;
                return;
            }
            else if (@Convert.ToInt32(Model.IssueComplete) == 1) {
                $("#Grid_toolbarItems").data("ejToolbar").items.get(0).hidden = true;
                $("#Grid_toolbarItems").data("ejToolbar").items.get(1).hidden = true;
                $("#Grid_toolbarItems").data("ejToolbar").items.get(2).hidden = true;
            }
        }*@
    </script>
}

