@using System.Linq;
@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@inject GeraFin.DAL.DataAccess.ApplicationDbContext context

@{
   int BranchId = Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));
   Branch branch = context.Branch.SingleOrDefault(x => x.BranchId == BranchId);
}
@{
   ViewData["Title"] = "Purchase Sumarry Detail";
}

@model GeraFin.Models.ViewModels.GeraFinWeb.PurchaseSummary
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="/PurchaseSummary/Index">Purchase Sumarry</a></li>
         <li><a href="/PurchaseSummary/Detail/?id=@Model.InvoiceOrderId#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box" id="GeraFinTop">
         <div class="Invoice-logo">
            <!--<img src="/images/GeraLogo.PNG" style="float:left;height: 75px;width: 75px; "> <b> GERA</b>FIN-->
         </div>
         <table style="width:100%; border:3px solid;">
            <tr style="background-color:#367fa9; color:#fff">
               <th width="50%">
                  GERATEC
               </th>
               <th width="50%">
                  UNIT DETAILS
               </th>
            </tr>
            <tr>
               <td>
                  PO Box 5342
               </td>
               <td>
                  @branch.BranchName
               </td>
            </tr>
            <tr>
               <td>
                  Tyger Valley
               </td>
               <td>
                  @{
                     var OrderDate1 = Model.OrderDate.ToString("dd-MMM-yyyy");
                  }
                  @Html.DisplayFor(model => OrderDate1)
               </td>
            </tr>
            <tr>
               <td>
                  7536
               </td>
               <td>
                  IO Status: Completed
               </td>
            </tr>
         </table>
         <br />
         <table style="width:100%; border:3px solid;">
            <tr style="background-color:#367fa9; color:#fff">
               <th style="width:33%; border:1px solid;">
                  DATE
               </th>
            </tr>
            <tr>
               @{
                  var CloseDate = Model.DeliveryDate.ToString("dd-MMM-yyyy");
               }
               <td style="width:33%; border:1px solid;">
                  <b>
                     Start Date: &nbsp;@Html.DisplayFor(model => OrderDate1) <br />
                     Close Date: @Html.DisplayFor(model => CloseDate)
                  </b>
               </td>
            </tr>
         </table>
         <div class="box-header with-border"></div>
      </div>
      <!-- /.box -->
      <div class="box" id="AppendBefore">
         <div class="box-body">
            <div class="row">
               <div class="col-lg-12">
                  <div id="Grid"></div>
               </div>
            </div>
            <div class="row">
               <div class="col-lg-8">

               </div>
               <div class="col-lg-4">

               </div>
            </div>
         </div>
      </div>
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

   <style>
      #confirm {
         display: none;
         background-color: #ff0000;
         border: 1px solid #aaa;
         position: sticky;
         width: 250px;
         left: 50%;
         margin-left: -100px;
         padding: 6px 8px 8px;
         box-sizing: border-box;
         text-align: center;
      }

         #confirm button {
            background-color: #2a716c;
            display: inline-block;
            border-radius: 5px;
            border: 1px solid #aaa;
            padding: 5px;
            text-align: center;
            width: 80px;
            cursor: pointer;
         }

         #confirm .message {
            text-align: center;
         }
   </style>

}

@section Scripts{

   <script type="text/javascript">

       var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();
       var BranchId = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));

        function beforePrint(args) {
            document.getElementById("AppendBefore").style.display = "none";
            $(".GeraFinTop").css('display', 'block');
            args.element.prepend($(".box"));
        }

        $(function () {
            var dataManager = ej.DataManager({
                url: "/api/PurchaseSummaryLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "InvoiceOrderId": @Model.InvoiceOrderId}],
                offline: true
            });

           var dataManagerPurchaseOrder = ej.DataManager({
                url: "/api/PurchaseOrder",
                adaptor: new ej.WebApiAdaptor()
           });

            dataManager.ready.done(function (e) {
                $.validator.addMethod("customRegex", function (value, element, params) {
                    var gridValueID = GridProductId.value;
                    var available = 0;

                    $("#GridAvailable1 option").each(function () {
                        // Add
                        var matchID = $(this).val();

                        if (matchID == gridValueID) {
                            available = $(this).text();
                        }
                    });
                    debugger;

                    if (available >= value) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }, "To little stock available");

                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/PurchaseSummaryLine/Insert",
                        updateUrl: "/api/PurchaseSummaryLine/Update",
                        removeUrl: "/api/PurchaseSummaryLine/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "printGrid", ej.Grid.ToolBarItems.ExcelExport]
                    },
                    editSettings: {
                        allowEditing: false,
                        allowAdding: false,
                        allowDeleting: false,
                        showDeleteConfirmDialog: false,
                    },



                   toolbarClick: function (args) {
                      if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                         $("#modal-info").modal()
                      }
                    },

                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },

                   allowPaging: true,
                   pageSettings: {
                      pageSize: 25, printMode: ej.Grid.PrintMode.AllPages
                   },

                   columns: [
                      { field: "InvoiceOrderLineId", headerText: 'IN Id', isPrimaryKey: true, isIdentity: true, visible: false },
                      { field: "InvoiceOrderId", headerText: 'InvoiceOrderId', defaultValue: @Model.InvoiceOrderId, foreignKeyField: "InvoiceOrderId", foreignKeyValue: "InvoiceOrderName", dataSource: dataManagerPurchaseOrder, visible: false },
                      { field: "Date", headerText: 'Date', allowEditing: false },
                      { field: "InvoiceNumber", headerText: 'Invoice Number', allowEditing: false },
                      { field: "SupplierName", headerText: 'Supplier Name', allowEditing: false },
                      { field: "VAT", headerText: 'VAT', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false, visible: false },
                      { field: "SupplierInvoiceNo", headerText: 'Supplier Invoice No', allowEditing: false },
                      { field: "TotalExclVAT", headerText: 'Total', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                      { field: "SupplierInvoiceTotal", headerText: 'Supplier Total', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                      { field: "SupplierInvoiceVAT", headerText: 'Supplier VAT', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                      { field: "SupplierTotalinclVAT", headerText: 'Supplier Total incl VAT', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false },
                      //{ field: "TotalInclVAT", headerText: 'Total Incl VAT', defaultValue: 0, editType: "numericedit", format: "R " + "{0:n2}", allowEditing: false, visible: false },

                   ],

                    toolbarClick: function (args) {
                      if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                         $("#modal-info").modal()
                      }

                      this.exportGrid = this["export"];

                      if (args.itemName == "Excel Export") {
                         this.exportGrid('http://' + window.location.host + '/' + 'api/PurchaseSummaryLine/ExportToExcel')

                         var grid = document.getElementById("#Grid").ejGrid("instance");
                         console.log(grid);
                         this.exportGrid(grid);
                         //e.cancel = true;
                      }
                   },
                    beforePrint: "beforePrint",
                    actionComplete: "complete",
                });
            });
        });
        function complete(args) {
            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'save' || args.requestType == 'delete') {
                RewriteTotal(args.data.IssuesOrderId);
            }
        }
   </script>
}

