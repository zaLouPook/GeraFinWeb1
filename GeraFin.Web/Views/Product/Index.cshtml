@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
   ViewData["Title"] = "Product";
}

@model GeraFin.Models.ViewModels.GeraFinWeb.Product

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box">
         <div class="box-header with-border">
            <h3 class="box-title text-primary"><i class="fa fa-tag"></i> @ViewData["Title"]</h3>

            <div class="box-tools pull-right">
               <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip" title="Collapse">
                  <i class="fa fa-minus"></i>
               </button>
               <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                  <i class="fa fa-times"></i>
               </button>
            </div>
         </div>
         <div class="box-body">
            <div id="Grid"></div>
         </div>
         <!-- /.box-body -->
         <div class="box-footer">

         </div>
         <!-- /.box-footer-->
      </div>
      <!-- /.box -->
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}


@section Scripts{

   <script type="text/javascript">

      var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();

      if (Permission == true) {
         var data = ej.Grid.ToolBarItems.ExcelExport;
      }
      else {
         data = '';
         Permission = false;
      }

        function create(args) {
            $('#Grid_search').bind('keydown keyup', function (e) {
                var gridObj = $("#Grid").data("ejGrid");
                gridObj.search($(this).find(".e-gridsearchbar").val());
            });
            $("#Grid_search").find('.e-cancel').on('click', function () {
                var grid = $(".e-grid").data('ejGrid');
                grid.clearSearching();
            })
        }

        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/Product/GetProduct",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            var dataManagerUnitOfMeasure = ej.DataManager({
                url: "/api/UnitOfMeasure",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerVendor = ej.DataManager({
            url: "/api/Vendor",
            adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerBranch = ej.DataManager({
            url: "/api/Branch",
            adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerProductType = ej.DataManager({
                url: "/api/ProductType",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManager.ready.done(function (e) {
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/Product/Insert",
                        updateUrl: "/api/Product/Update",
                        removeUrl: "/api/Product/Remove",
                    }),

                    toolbarSettings: {
                       showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", data, "printGrid"]
                    },
                   editSettings: {
                      allowEditing: Permission,
                      allowAdding: Permission,
                      allowDeleting: Permission,
                      showDeleteConfirmDialog: false,
                   },

                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    create: "create",
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 999999999,
                        enableCaseSensitivity: true
                   },

                   allowPaging: true,
                   pageSettings: { pageSize: 20, printMode: ej.Grid.PrintMode.CurrentPage },
                   columns:
                      [
                         { field: "ProductId", headerText: 'Product Id', isPrimaryKey: true, isIdentity: true, visible: false },
                         { field: "BranchId", headerText: 'Branch', allowEditing: true, foreignKeyField: "BranchId", foreignKeyValue: "BranchName", dataSource: dataManagerBranch, validationRules: { required: true }, visible: Permission },
                         { field: "VendorId", headerText: 'Supplier Name', allowEditing: true, foreignKeyField: "VendorId", foreignKeyValue: "VendorName", dataSource: dataManagerVendor, validationRules: { required: true } },
                         { field: "ProductName", headerText: 'Product Name', allowEditing: true, validationRules: { required: true }, width: 350 },
                         { field: "BrandName", headerText: 'Brand Name', allowEditing: true, validationRules: { required: true } },
                         { field: "Description", headerText: 'Description', visible: false },
                         { field: "ProductCode", headerText: 'ProductCode', visible: false },
                         { field: "UnitOfMeasureId", headerText: 'UOM', allowEditing: true, foreignKeyField: "UnitOfMeasureId", allowEditing: true, foreignKeyValue: "Description", dataSource: dataManagerUnitOfMeasure, validationRules: { required: true } },
                         { field: "DefaultBuyingPrice", headerText: 'Price', allowEditing: true, editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 }, format: "{0:n2}" },
                         { field: "SpecialPrice", headerText: 'Special Price', allowEditing: true, editType: "numericedit", format: "R" + " " + "{0:n2}" },
                         { field: "ProductTypeId", headerText: 'Product Type', allowEditing: true, foreignKeyField: "ProductTypeId", foreignKeyValue: "ProductTypeName", dataSource: dataManagerProductType, visible: true },
                         { field: "Active", headerText: 'Active', allowEditing: true, editType: "booleanedit", type: "boolean", editParams: { showRoundedCorner: true }, textAlign: "Center", visible: Permission },
                         { field: "RowCol", headerText: 'RowCol', visible: false },
                      ],

                   rowDataBound: function (args) {
                      var $element = $(args.row);

                      if (args.data.SpecialPrice > 0) {
                         $element.css("background-color", "#4cbc3c").css("color", "#4cbc3c");
                         $element.css("color", "#fff").css("color", "white");
                      }
                   },

                   rowDataBound: function (args) {
                      var $element = $(args.row);

                      if (args.data.RowCol > 0) {
                         $element.css("background-color", "#4cbc3c").css("background-color", "#3c8dbc");
                         $element.css("color", "#fff").css("color", "black");
                      }
                   },

                   toolbarClick: function (args) {
                      if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                         $("#modal-info").modal()
                      }

                      this.exportGrid = this["export"];

                      if (args.itemName == "Excel Export") {
                         this.exportGrid('http://' + window.location.host + '/' + 'api/Product/ExportToExcel')

                         var grid = document.getElementById("#Grid").ejGrid("instance");
                         console.log(grid);
                         this.exportGrid(grid);
                         //e.cancel = true;
                      }
                   },
                   actionComplete: "complete",
                });
            });
        });

      function complete(args) {

          if (args.requestType == 'beginedit') {
             $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
          }
         if (args.requestType == 'beginedit' || args.requestType == 'add') {
         }
      }

   </script>
}