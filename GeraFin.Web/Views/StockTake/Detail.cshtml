@using System.Linq;
@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@inject GeraFin.DAL.DataAccess.ApplicationDbContext context

@{
   int BranchId = Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));
   Branch branch = context.Branch.SingleOrDefault(x => x.BranchId == BranchId);
}
@model GeraFin.Models.ViewModels.GeraFinWeb.StockTake

@{
   ViewData["Title"] = "Stock Take";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="/StockTake/Index">@ViewData["Title"]</a></li>
         <li><a href="/StockTake/Detail/?id=@Model.StockTakeId#">@ViewData["Title"]</a></li>
      </ol>
   </section>

   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box" id="GeraFinTop">
         <div class="Invoice-logo">
            <!--<img src="/images/GeraLogo.PNG" style="float:left;height: 75px;width: 75px; "> <b> GERA</b>FIN-->
         </div>
         <table style="width:100%; border:3px solid;">
            <tr style="background-color:#367fa9; color:#fff">
               <th width="50%">
                  GERATEC
               </th>
               <th width="50%">
                  UNIT DETAILS
               </th>
            </tr>
            <tr>
               <td>
                  PO Box 5342
               </td>
               <td>
                  @branch.BranchName
               </td>
            </tr>
            <tr>
               <td>
                  Tyger Valley
               </td>
               <td>
                  @{
                     var OrderDate1 = Model.OrderDate.ToString("yyyy-MM-dd");
                  }
                  @Html.DisplayFor(model => OrderDate1)
               </td>
            </tr>
            <tr>
               <td>
                  7536
               </td>
               <td>
                  IO Status: Completed
               </td>
            </tr>
         </table>
         @{
            var CloseDate = Model.DeliveryDate.ToString("yyyy-MM-dd");
         }
         <table>
            <tr style="background-color:#367fa9; color:#fff"><th style="width:50%; border:1px solid;"></th></tr>
            <tr style="background-color:#367fa9; color:#fff"><td style="width:50%; border:1px solid;"></td></tr>
         </table>
         <table style="width:100%; border:3px solid;">
            <tr style="background-color:#367fa9; color:#fff">
               <th style="width:50%; border:1px solid;">
                  <b>Stock Take Period From</b>
               </th>
               <th style="width:50%; border:1px solid;">
                  <b>Stock Take Period To</b>
               </th>
            </tr>
            <tr>
               <td style="width:50%; border:1px solid;">
                  <b>@Html.DisplayFor(model => OrderDate1) </b>
               </td>
               <td style="width:50%; border:1px solid;">
                  <b>@Html.DisplayFor(model => CloseDate)</b>
               </td>
            </tr>
         </table>

         <div class="box-header with-border">

         </div>
         <!--
             <div class="box-body">
                 <div class="content-container-fluid">

                 </div>

             </div>
         -->
         <!-- /.box-body -->
         <!-- /.box-footer-->
      </div>
      <!-- /.box -->
      <div class="box">
         <div class="box-body">
            <div class="row">
               <div class="col-lg-12">
                  <div id="Grid"></div>
               </div>
            </div>
            <div class="row">
               <div class="col-lg-8">

               </div>
               <div class="col-lg-4">

               </div>
            </div>
         </div>
      </div>
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

   <style>
      #confirm {
         display: none;
         background-color: #ff0000;
         border: 1px solid #aaa;
         position: sticky;
         width: 250px;
         left: 50%;
         margin-left: -100px;
         padding: 6px 8px 8px;
         box-sizing: border-box;
         text-align: center;
      }

         #confirm button {
            background-color: #2a716c;
            display: inline-block;
            border-radius: 5px;
            border: 1px solid #aaa;
            padding: 5px;
            text-align: center;
            width: 80px;
            cursor: pointer;
         }

         #confirm .message {
            text-align: center;
         }
   </style>

}

@section Scripts{

   <script type="text/javascript">

      function beforePrint(args) {
         $(".GeraFinTop").css('display', 'block');
         args.element.prepend($(".box"));
      }

      $(function () {
         var dataManager = ej.DataManager({
            url: "/api/StockTakeLine",
            adaptor: new ej.WebApiAdaptor(),
            headers: [{ "StockTakeId": @Model.StockTakeId}],
            offline: true
         });

         var dataManagerBranch = ej.DataManager({
            url: "/api/Branch",
            adaptor: new ej.WebApiAdaptor()
         });

        $('#BranchId').ejDropDownList({
            dataSource: dataManagerBranch,
            fields: { id: 'BranchId', text: 'BranchName', value: 'BranchId' },
            value: @Model.BranchId,
            enabled: false,
        });

           dataManager.ready.done(function (e) {

              $.validator.addMethod("customRegex", function (value, element, params) {
                 var gridValueID = GridProductId.value;
                 var available = 0;

                 $("#GridAvailable1 option").each(function () {
                    var matchID = $(this).val();

                    if (matchID == gridValueID) {
                       available = $(this).text();
                    }
                 });
                 debugger;
                 if (available >= value) {
                    return true;
                 }
                 else {
                    return false;
                 }
              }, "To little stock available");

              $("#Grid").ejGrid({
                 dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/StockTakeLine/Insert",
                    updateUrl: "/api/StockTakeLine/Update",
                    removeUrl: "/api/StockTakeLine/Remove",
                 }),

                 toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel", "printGrid"]
                 },

                 editSettings: {
                    allowEditing: true,
                    allowAdding: false,
                    allowDeleting: false,
                    showDeleteConfirmDialog: false,
                 },

                 toolbarClick: function (args) {
                    if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                       $("#modal-info").modal()
                    }
                 },

                 allowPaging: true,
                 pageSettings: {
                    pageSize: 25, printMode: ej.Grid.PrintMode.AllPages
                 },

                 columns: [
                    { field: "StockTakeLineId", headerText: 'StockTakeLineId', isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "StockTakeId", headerText: 'StockTakeId', allowEditing: false, visible: false },
                    { field: "StockId", headerText: 'StockId', allowEditing: false, visible: false },
                    { field: "ProductId", headerText: 'ProductId', allowEditing: false, visible: false },
                    { field: "Price", headerText: 'Price', allowEditing: false, visible: false },
                    { field: "BranchId", headerText: 'BranchId', allowEditing: false, visible: false },
                    { field: "ProductName", headerText: 'Product Name', width: 300, allowEditing: false },
                    { field: "UnitOfMeasure", headerText: 'UOM', allowEditing: false },
                    { field: "StoreRoomCount", headerText: 'Store Room Count', defaultValue: 0, allowEditing: true, visible: true, },
                    { field: "StoreRoomAmt", headerText: 'Store Room Amt', defaultValue: 0, allowEditing: false, format: "R" + " " + "{0:n2}", visible: @Model.Rollover.ToString().ToLower() },
                    { field: "VarianceCount", headerText: 'Variance Count', defaultValue: 0, allowEditing: false, visible: @Model.Rollover.ToString().ToLower() },
                    { field: "VarianceAmount", headerText: 'Variance Amount', defaultValue: 0, allowEditing: false, format: "R" + " " + "{0:n2}", visible: @Model.Rollover.ToString().ToLower() },
                    { field: "OpeningBalanceCount", headerText: 'Opening Balance Count', defaultValue: 0, allowEditing: false, visible: @Model.Rollover.ToString().ToLower() },
                    { field: "OpeningBalanceAmount", headerText: 'Opening Balance Amount', defaultValue: 0, allowEditing: false, format: "R" + " " + "{0:n2}", visible: @Model.Rollover.ToString().ToLower() },
                 ],
                 beforePrint: "beforePrint",
                 actionComplete: "complete",
              });
           });
      });

      function complete(args) {

         var ModelData = '@Model.Rollover.ToString()'.toLowerCase().trim();
         UpdateToolbarEdit(ModelData)
         
         if (args.requestType == 'beginedit') {
            $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
         }
         if (args.requestType == 'save' || args.requestType == 'delete') {
            //RewriteTotal(args.data.IssuesOrderId);
         }
      }
      
      function UpdateToolbarEdit(ModelData) {

         var IsAdmin = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin"));

         if (IsAdmin == 1) {
            
            var editItem = $("#Grid_toolbarItems").data("ejToolbar").items.get(1);
            editItem.hidden = false;
            return;

         } else if(ModelData = true && IsAdmin == 0) {

            var AddItems = $("#Grid_toolbarItems").data("ejToolbar").items.get(0);
            var editItem = $("#Grid_toolbarItems").data("ejToolbar").items.get(1);
            var DeltItem = $("#Grid_toolbarItems").data("ejToolbar").items.get(2);
            AddItems.hidden = true;
            editItem.hidden = true;
            DeltItem.hidden = true;
         }
      }
       
   </script>
}

