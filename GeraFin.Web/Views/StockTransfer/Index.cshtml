@using Microsoft.AspNetCore.Http;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
   ViewData["Title"] = "Stock Transfers";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
   <section class="content-header" id="content-Page-header">
      <h1>
         @ViewData["Title"]
      </h1>
      <ol class="breadcrumb">
         <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
         <li><a href="#">@ViewData["Title"]</a></li>
      </ol>
   </section>
   <!-- Main content -->
   <section class="content">
      <!-- Default box -->
      <div class="box">
         <div class="box-header with-border">
            <h3 class="box-title text-primary"><i class="fa fa-tag"></i> @ViewData["Title"]</h3>
            <div class="box-tools pull-right">
               <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip" title="Collapse">
                  <i class="fa fa-minus"></i>
               </button>
               <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                  <i class="fa fa-times"></i>
               </button>
            </div>
         </div>
         <div class="box-body">
            <div id="Grid"></div>
         </div>
         <!-- /.box-body -->
         <div class="box-footer">

         </div>
         <!-- /.box-footer-->
      </div>
      <!-- /.box -->
   </section>
   <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{
   <script src="~/adminlte/components/jquery/dist/jquery.validate.min.js"></script>

   <script type="text/javascript">

      var Permission = @Convert.ToBoolean(HttpContextAccessor.HttpContext.Session.GetInt32("_IsAdmin")).ToString().ToLower();
      var BranchId = @Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("_BranchId"));
      var Maxvalue;
      var PrevGridQuantityValue;

        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/StockTransfer/GetProduct",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            var dataManagerUnitOfMeasure = ej.DataManager({
                url: "/api/UnitOfMeasure",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerVendor = ej.DataManager({
            url: "/api/Vendor",
            adaptor: new ej.WebApiAdaptor()
            });

           var dataManagerBranch = ej.DataManager({
               url: "/api/StockTransfer/GetBranch",
              adaptor: new ej.WebApiAdaptor()
           });

            dataManager.ready.done(function (e) {
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        updateUrl: "/api/StockTransfer/Update",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: false,
                        allowDeleting: false,
                        showDeleteConfirmDialog: false,
                        editMode: "dialog"
                   },

                   toolbarClick: function (args) {
                      if (args.itemName == 'Delete' && this.getSelectedRecords().length) {
                         $("#modal-info").modal()
                      }
                   },

                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 25, printMode: ej.Grid.PrintMode.CurrentPage },
                    columns: [
                        { field: "StockId", headerText: 'Stock Id', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "ProductId", headerText: 'Product Id', isPrimaryKey: false, isIdentity: false, visible: false },
                        { field: "VendorId", headerText: 'Supplier', allowEditing: false, foreignKeyField: "VendorId", foreignKeyValue: "VendorName", dataSource: dataManagerVendor },
                        { field: "BranchId", headerText: 'TransferedTo', allowEditing: true, foreignKeyField: "BranchId", foreignKeyValue: "BranchName", dataSource: dataManagerBranch },
                        { field: "BrandName", headerText: 'Brand', allowEditing: false, validationRules: { required: true } },
                        { field: "ProductName", headerText: 'Product', width: 300, allowEditing: false, validationRules: { required: true } },
                        { field: "Quantity", headerText: 'Avail Quantity', editType: ej.Grid.EditingType.Numeric, editParams: { decimalPlaces: 2 }, format: "{0:n2}"},
                        { field: "UnitOfMeasureId", headerText: 'UOM', allowEditing: false, foreignKeyField: "UnitOfMeasureId", foreignKeyValue: "UnitOfMeasureName", dataSource: dataManagerUnitOfMeasure, validationRules: { required: true } },
                        { field: "DefaultBuyingPrice", headerText: 'Price', allowEditing: false, editType: "numericedit", format: "R" + " " + "{0:n2}" },
                        { field: "IsTransferedStock", headerText: 'Transfer', editType: "booleanedit", type: "boolean", editParams: { showRoundedCorner: true }, textAlign: "Center" },
                    ],
                    actionComplete: "complete",
                });
            });
        });
      function complete(args) {

         if (args.requestType == 'beginedit') {

             $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });

             Maxval = document.getElementsByClassName("e-rowcell e-selectionbackground e-active").item(7).textContent;

             if (args.requestType == 'beginedit' || args.requestType == 'add') {

                $('#GridIsTransferedStock').ejCheckBox({ change: 'CheckChange' });
                $('#GridQuantity').ejNumericTextbox({ change: 'GridQuantityChange' });

                var AvailableQuantity = document.getElementsByClassName("e-numerictextbox e-field e-js e-input").item(0).value;

                $(this).data("value", AvailableQuantity);

                parseInt(PrevGridQuantityValue = ($(this).data('value')), 10);
             }
             document.getElementById("EditDialog_Grid_Save").style.display = "none";
          }
       }
       function CheckChange(e) {

          if (document.getElementById("GridIsTransferedStock").checked) {

             document.getElementById("EditDialog_Grid_Save").style.display = "inline";

          } else {

             document.getElementById("EditDialog_Grid_Save").style.display = "none";
          }
      }

      function GridQuantityChange(e) {

         var GridQuantityValue = parseInt((document.getElementById("GridQuantity").value), 10);

         if (GridQuantityValue > PrevGridQuantityValue) {

            $("#modal-danger").modal();

            var GridQuantityValue = (document.getElementById("GridQuantity").value = PrevGridQuantityValue);
         }
      }
   </script>
}

